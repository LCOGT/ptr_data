org: photonadmin
app: photonranch

service: ptrdata

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-existing-s3
  - serverless-python-requirements

package:
  exclude:
    - venv/**
    - .env
    - lambda_tests.txt

provider:
  name: aws
  region: us-east-1
  runtime: python3.7
  environment: 
    REGION: ${self:provider.region}
    BUCKET_NAME: photonranch-001
    DB_ADDRESS: ${ssm:db-url}
    SUBSCRIBERS_TABLE: photonranch-data-subscribers1
    WSS_URL:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "WebsocketsApi"
          - ".execute-api.us-east-1.amazonaws.com/dev"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
          - "s3:GetBucketNotification"
          - "s3:PutBucketNotification"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:provider.environment.BUCKET_NAME}
            - "or *"

    - Effect: Allow 
      Action: 
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"

    - Effect: Allow 
      Action: 
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - ${self:provider.region}
            - ":*:*"


functions:

  insert_data:
    handler: insert_data.main
    layers:
      - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-SQLAlchemy:8
    events:
      - existingS3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          events: 
          - s3:ObjectCreated:* 

  connectionManager:
    handler: handler.connection_manager
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  defaultMessage:
    handler: handler.default_message
    events:
      - websocket:
          route: $default


resources:
  Resources:
    # This table tracks websocket clients that recieve data updates.
    dataSubscribers: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SUBSCRIBERS_TABLE}
        AttributeDefinitions:
          - AttributeName: ConnectionID
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
